// Generated by CoffeeScript 1.9.3

/*
Modo de uso
===========

```javascript
var gulp  = require('gulp');
var stack = require('gulpstack');

stack(gulp);
```

Tareas incluidas
----------------


```sh
$ gulp [watch|markdown|stylus|sass|coffee|jade]
```

- watch: Permite compilar el contenido muentras este se este editando.
- markdown: Compila el contenido de tipo Markdown.
- stylus: Compila el contenido de tipo Stylus.
- sass: Compila el contenido de tipo Sass.
- coffee: Compila el contenido de tipo Coffee.
- jade: Compila el contenido de tipo Jade.

Ejemplo
-------

```sh
gulp watch
```
 */

(function() {
  var exports, expr;

  expr = function(gulp, config) {
    var __base, coffee, concat, concatCss, connect, cssmin, dest, dests, folder_dest, folder_src, fs, gutil, include, jade, markdown, matchs, minify, minifyCSS, name_script_to_concat, name_styles_to_concat, names, names_dest, rename, sass, script_to_concat, sourcemaps, src, styles_to_concat, stylus, watch;
    if (config == null) {
      config = {};
    }
    coffee = require('gulp-coffee');
    concat = require('gulp-concat');
    concatCss = require('gulp-concat-css');
    connect = require('gulp-connect');
    cssmin = require('gulp-cssmin');
    fs = require('fs');
    gutil = require('gulp-util');
    include = require('gulp-include');
    jade = require('gulp-jade');
    markdown = require('gulp-markdown');
    minify = require('gulp-minify');
    minifyCSS = require('gulp-minify-css');
    rename = require('gulp-rename');
    sass = require('gulp-sass');
    sourcemaps = require('gulp-sourcemaps');
    stylus = require('gulp-stylus');
    watch = require('gulp-watch');
    folder_dest = config.dest || process.env.FOLDER_DEST || 'dest';
    folder_src = config.src || process.env.FOLDER_SRC || 'src';
    script_to_concat = config.scripts || [];
    styles_to_concat = config.styles || [];
    name_script_to_concat = config.nameContactScript || "script.js";
    name_styles_to_concat = config.nameContactStyle || "style.css";
    __base = config.patch || process.cwd();
    dest = __base + "/" + folder_dest;
    src = __base + "/" + folder_src;
    names = {
      coffee: config.coffee || 'coffee',
      css: config.css || 'css',
      html: config.html || 'html',
      jade: config.jade || 'jade',
      markdown: config.markdown || 'markdown',
      sass: config.sass || 'sass',
      stylus: config.stylus || 'stylus'
    };
    names_dest = {
      css: 'css',
      html: '',
      js: 'js',
      markdown: 'html'
    };
    matchs = {
      coffee: src + "/" + names.coffee + "/**/[a-zA-Z0-9]*.coffee",
      jade: src + "/" + names.jade + "/**/[a-zA-Z0-9]*.jade",
      markdown: src + "/" + names.markdown + "/**/*.{markdown,md,mdown}",
      sass: src + "/" + names.sass + "/**/[a-zA-Z0-9]*.{scss,sass}",
      stylus: src + "/" + names.stylus + "/**/[a-zA-Z0-9]*.styl",
      watch: {
        coffee: src + "/" + names.coffee + "/**/*.coffee",
        jade: src + "/" + names.jade + "/**/*.jade",
        markdown: src + "/" + names.markdown + "/**/*.{markdown,md,mdown}",
        sass: src + "/" + names.sass + "/**/*.{scss,sass}",
        stylus: src + "/" + names.stylus + "/**/*.styl"
      }
    };
    dests = {
      css: dest + "/" + names_dest.css,
      html: dest + "/" + names_dest.html,
      js: dest + "/" + names_dest.js,
      markdown: dest + "/" + names_dest.markdown
    };
    gulp.task('markdown', function() {
      return gulp.src(matchs.markdown).pipe(markdown()).pipe(gulp.dest(dests.markdown)).pipe(connect.reload());
    });
    gulp.task('stylus', function() {
      return gulp.src(matchs.stylus).pipe(stylus()).pipe(gulp.dest(dests.css)).pipe(cssmin()).pipe(rename({
        suffix: '.min'
      })).pipe(gulp.dest(dests.css)).pipe(connect.reload());
    });
    gulp.task('sass', function() {
      return gulp.src(matchs.sass).pipe(sass()).pipe(gulp.dest(dests.css)).pipe(cssmin()).pipe(rename({
        suffix: '.min'
      })).pipe(gulp.dest(dests.css)).pipe(connect.reload());
    });
    gulp.task('coffee', function() {
      return gulp.src(matchs.coffee).pipe(include()).pipe(sourcemaps.init()).pipe(coffee()).pipe(minify()).pipe(sourcemaps.write('.')).pipe(gulp.dest(dests.js)).pipe(connect.reload());
    });
    gulp.task('jade', function() {
      return gulp.src(matchs.jade).pipe(jade()).pipe(gulp.dest(dests.html)).pipe(connect.reload());
    });
    gulp.task('concat', ['coffee'], function() {
      return gulp.src(script_to_concat).pipe(concat(name_script_to_concat)).pipe(minify()).pipe(gulp.dest(dests.js)).pipe(connect.reload());
    });
    gulp.task('concat-css', ['sass', 'stylus'], function() {
      return gulp.src(styles_to_concat).pipe(concatCss(name_styles_to_concat)).pipe(minify()).pipe(gulp.dest(dests.css)).pipe(connect.reload());
    });
    gulp.task('init', function() {
      var index, name, results;
      try {
        fs.mkdirSync("" + src);
      } catch (_error) {}
      try {
        fs.mkdirSync("" + dest);
      } catch (_error) {}
      results = [];
      for (index in names) {
        name = names[index];
        try {
          results.push(fs.mkdirSync(src + "/" + name));
        } catch (_error) {}
      }
      return results;
    });
    gulp.task('debug', ['coffee', 'jade', 'markdown', 'sass', 'stylus', 'concat', 'concat-css']);
    gulp.task('connect', function() {
      return connect.server({
        root: ["" + dest, 'bower_components'],
        livereload: true
      });
    });
    return gulp.task('watch', ['connect'], function() {
      gulp.watch(matchs.watch.coffee, ['coffee']);
      gulp.watch(matchs.watch.jade, ['jade']);
      gulp.watch(matchs.watch.markdown, ['markdown', 'jade']);
      gulp.watch(matchs.watch.sass, ['sass']);
      gulp.watch(matchs.watch.stylus, ['stylus']);
    });
  };

  module.exports = exports = expr;

}).call(this);
